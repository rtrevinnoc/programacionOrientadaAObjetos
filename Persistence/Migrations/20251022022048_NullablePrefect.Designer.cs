// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ProgramacionOrientadaAObjetosContext))]
    [Migration("20251022022048_NullablePrefect")]
    partial class NullablePrefect
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Domain.Documents.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CURP")
                        .HasColumnType("longtext");

                    b.Property<string>("Correo")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sexo")
                        .HasColumnType("longtext");

                    b.Property<int?>("TelefonoCasa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Core.Domain.Management.Classroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Classrooms", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Management.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Management.Llave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PrefectId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId")
                        .IsUnique();

                    b.HasIndex("PrefectId");

                    b.ToTable("Llaves", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Management.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Core.Domain.Employees.Prefect", b =>
                {
                    b.HasBaseType("Core.Domain.Employees.Employee");

                    b.ToTable("Prefect");
                });

            modelBuilder.Entity("Core.Domain.Employees.Teacher", b =>
                {
                    b.HasBaseType("Core.Domain.Employees.Employee");

                    b.ToTable("Teachers", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Documents.Document", b =>
                {
                    b.HasOne("Core.Domain.Employees.Employee", "Owner")
                        .WithMany("Documents")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Core.Domain.Management.Llave", b =>
                {
                    b.HasOne("Core.Domain.Management.Classroom", "Classroom")
                        .WithOne("Llave")
                        .HasForeignKey("Core.Domain.Management.Llave", "ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Employees.Prefect", "Prefect")
                        .WithMany("LLaves")
                        .HasForeignKey("PrefectId");

                    b.Navigation("Classroom");

                    b.Navigation("Prefect");
                });

            modelBuilder.Entity("Core.Domain.Management.Schedule", b =>
                {
                    b.HasOne("Core.Domain.Management.Classroom", "Classroom")
                        .WithMany("Schedules")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Management.Course", "Course")
                        .WithMany("Schedules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Employees.Teacher", "Teacher")
                        .WithMany("Schedules")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Core.Domain.Employees.Teacher", b =>
                {
                    b.HasOne("Core.Domain.Employees.Employee", null)
                        .WithOne()
                        .HasForeignKey("Core.Domain.Employees.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Employees.Employee", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Core.Domain.Management.Classroom", b =>
                {
                    b.Navigation("Llave")
                        .IsRequired();

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Core.Domain.Management.Course", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Core.Domain.Employees.Prefect", b =>
                {
                    b.Navigation("LLaves");
                });

            modelBuilder.Entity("Core.Domain.Employees.Teacher", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
